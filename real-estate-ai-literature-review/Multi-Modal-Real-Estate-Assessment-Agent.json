{
  "nodes": [
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": ""
        }
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.7,
      "position": [
        592,
        288
      ],
      "id": "f1d16e80-40eb-46bc-be68-419583731aba",
      "name": "Market Data Retrieval",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ByIqU6NCiCgk7P0M",
          "name": "Google Sheets - Cayman"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.googleDocsTool",
      "typeVersion": 2,
      "position": [
        400,
        288
      ],
      "id": "3a605589-59cc-460f-8896-eb75258f56f7",
      "name": "Assessment Report Generator",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "kdh3GrRfdGsJCARn",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Multi-Modal Real Estate Assessment Agent\n\n**Purpose**: Comprehensive property assessment integrating images, text, and geospatial data\n\n**Value**: Reduces assessment time from days to minutes while improving accuracy through multimodal data integration\n\n**Tools**:\n- Property Image Processor (computer vision)\n- Listing Description Analyzer (NLP)\n- Location Intelligence Engine (GIS)\n- Automated Valuation Model (ML ensemble)\n- Assessment Report Compiler (PDF generation)\n\n**Stakeholders**: Appraisers, lenders, real estate investors, property managers",
        "height": 912,
        "width": 1712,
        "color": 5
      },
      "id": "ce56ec5d-8980-47b3-b82d-6b90b7753a8a",
      "name": "Multi-Modal Assessment Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -752,
        -432
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a Multi-Modal Property Assessment AI Agent that integrates image analysis, text processing, geospatial data, and valuation modeling to provide comprehensive real estate assessments.\n\nYour capabilities:\n- **Image Analysis**: Process satellite imagery, street photos, floor plans for condition assessment\n- **Text Processing**: Extract key information from property listings and offering memoranda\n- **Location Intelligence**: Analyze neighborhood demographics, walkability, school districts\n- **Automated Valuation**: Generate price estimates with confidence intervals using ensemble ML models\n- **Report Generation**: Create professional PDF reports with charts and visualizations\n\nWorkflow Process:\n1. User uploads property images/listing text\n2. Run Image Analysis + Text Extraction in parallel\n3. Process Geospatial Data for location intelligence\n4. Synthesize all data in Automated Valuation Model\n5. Generate comprehensive PDF report\n6. Provide natural language summary and answer follow-up questions\n\nAlways provide confidence scores, key drivers, and comparable property references in your assessments."
        }
      },
      "id": "1d4c95b8-e57c-49f2-9c8b-547642cd98bb",
      "name": "Multi-Modal Property Analyzer",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -96,
        -48
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -688,
        288
      ],
      "id": "952d13e0-4361-4709-8f4d-9be7b7a98714",
      "name": "GPT-4 Vision Model",
      "credentials": {
        "openAiApi": {
          "id": "R4kqYMlb7z36skUH",
          "name": "OpenAi-Agentic-Assets"
        }
      }
    },
    {
      "parameters": {
        "description": "Generates property valuation estimates by combining property features, location data, and market comparables. Uses statistical modeling and machine learning approaches for accurate price predictions.",
        "language": "python",
        "pythonCode": "import numpy as np\nimport json\nfrom typing import Dict, List, Any, Optional\n\n# Automated Valuation Model for property pricing\ndef automated_valuation_model(\n    property_features: Dict[str, Any],\n    location_data: Dict[str, Any],\n    comparable_sales: List[Dict[str, Any]] = None,\n    market_conditions: Dict[str, Any] = None\n) -> Dict[str, Any]:\n    \"\"\"\n    Generate automated property valuation using multiple data sources.\n\n    Args:\n        property_features: Dictionary with bedrooms, bathrooms, square_feet, etc.\n        location_data: Dictionary with neighborhood and location metrics\n        comparable_sales: List of recent comparable property sales\n        market_conditions: Current market indicators\n\n    Returns:\n        Dictionary with valuation estimate and confidence metrics\n    \"\"\"\n    try:\n        # Base price per square foot by property type and location\n        base_psf = {\n            'single family': {\n                'urban': 250, 'suburban': 200, 'rural': 150,\n                'premium': 350, 'luxury': 500\n            },\n            'condo': {\n                'urban': 300, 'suburban': 250, 'rural': 180,\n                'premium': 400, 'luxury': 600\n            },\n            'townhouse': {\n                'urban': 275, 'suburban': 225, 'rural': 165,\n                'premium': 375, 'luxury': 550\n            }\n        }\n\n        # Extract property details\n        bedrooms = property_features.get('bedrooms', 3)\n        bathrooms = property_features.get('bathrooms', 2)\n        square_feet = property_features.get('square_feet', 2000)\n        property_type = property_features.get('property_type', 'single family')\n        year_built = property_features.get('year_built', 2000)\n        condition = property_features.get('condition', 'good')\n        amenities = property_features.get('amenities', [])\n\n        # Location quality score (0-100)\n        location_score = location_data.get('location_score', 50)\n        neighborhood_rating = location_data.get('neighborhood_rating', 'average')\n\n        # Determine location tier\n        location_tier = 'suburban'  # default\n        if neighborhood_rating in ['excellent', 'premium', 'luxury']:\n            location_tier = 'premium'\n        elif neighborhood_rating in ['poor', 'rural']:\n            location_tier = 'rural'\n        elif location_score > 75:\n            location_tier = 'urban'\n\n        # Get base price per square foot\n        property_base_psf = base_psf.get(property_type, base_psf['single family']).get(location_tier, 200)\n\n        # Adjust for property age\n        current_year = 2024\n        age = current_year - year_built if year_built else 20\n        age_adjustment = max(-0.3, min(0.1, (50 - age) * 0.005))  # Peak at 25 years\n\n        # Adjust for condition\n        condition_multipliers = {\n            'excellent': 1.15,\n            'good': 1.0,\n            'fair': 0.9,\n            'poor': 0.75,\n            'unknown': 1.0\n        }\n        condition_multiplier = condition_multipliers.get(condition, 1.0)\n\n        # Adjust for size (economy of scale)\n        size_multiplier = 1.0\n        if square_feet < 1000:\n            size_multiplier = 0.95\n        elif square_feet > 3000:\n            size_multiplier = 1.05\n\n        # Adjust for bedrooms/bathrooms\n        bedroom_adjustment = (bedrooms - 3) * 0.05  # $25k per bedroom over/under 3\n        bathroom_adjustment = (bathrooms - 2) * 0.03  # $15k per bathroom over/under 2\n\n        # Premium amenities adjustment\n        premium_amenities = ['pool', 'waterfront', 'golf course', 'mountain view', 'ocean view']\n        amenity_bonus = sum(0.05 for amenity in amenities if amenity in premium_amenities)\n        amenity_bonus = min(amenity_bonus, 0.25)  # Cap at 25% bonus\n\n        # Calculate base value\n        base_value = square_feet * property_base_psf\n\n        # Apply all adjustments\n        adjusted_value = base_value * (1 + age_adjustment) * condition_multiplier * size_multiplier\n        adjusted_value += (bedroom_adjustment + bathroom_adjustment + amenity_bonus) * adjusted_value\n\n        # Apply location premium\n        location_premium = (location_score - 50) * 0.005  # 0.5% per point above/below 50\n        final_value = adjusted_value * (1 + location_premium)\n\n        # Calculate confidence based on data completeness\n        confidence_factors = [\n            1 if bedrooms else 0,\n            1 if bathrooms else 0,\n            1 if square_feet else 0,\n            1 if year_built else 0,\n            1 if location_score > 0 else 0,\n            1 if comparable_sales and len(comparable_sales) > 0 else 0\n        ]\n        confidence_score = sum(confidence_factors) / len(confidence_factors)\n        confidence_level = 'high' if confidence_score > 0.8 else 'medium' if confidence_score > 0.5 else 'low'\n\n        # Generate value range (±15% for medium confidence, ±25% for low)\n        range_percent = 0.15 if confidence_level == 'high' else 0.25 if confidence_level == 'medium' else 0.35\n        value_range = {\n            'low': round(final_value * (1 - range_percent)),\n            'high': round(final_value * (1 + range_percent))\n        }\n\n        # Key value drivers\n        value_drivers = []\n        if location_score > 70:\n            value_drivers.append('Premium location')\n        if condition == 'excellent':\n            value_drivers.append('Excellent condition')\n        if amenity_bonus > 0.1:\n            value_drivers.append('Premium amenities')\n        if age < 10:\n            value_drivers.append('New construction')\n        if square_feet > 2500:\n            value_drivers.append('Large size')\n\n        return {\n            \"estimated_value\": round(final_value),\n            \"value_range\": value_range,\n            \"price_per_sqft\": round(final_value / square_feet, 2),\n            \"confidence_level\": confidence_level,\n            \"confidence_score\": round(confidence_score, 2),\n            \"key_drivers\": value_drivers[:5],  # Top 5 drivers\n            \"valuation_method\": \"Statistical AVM\",\n            \"valuation_date\": \"2024-01-01\",\n            \"disclaimer\": \"This is an automated estimate. Professional appraisal recommended for final valuation.\",\n            \"market_conditions\": market_conditions.get('trend', 'stable') if market_conditions else 'unknown'\n        }\n\n    except Exception as e:\n        return {\n            \"error\": f\"Valuation calculation failed: {str(e)}\",\n            \"estimated_value\": None,\n            \"confidence_level\": \"unknown\"\n        }\n\n# Parse input data\ntry:\n    # Get inputs from different sources\n    property_data_str = query.get(\"property_features\", \"{}\")\n    location_data_str = query.get(\"location_data\", \"{}\")\n    comparables_str = query.get(\"comparable_sales\", \"[]\")\n    market_data_str = query.get(\"market_conditions\", \"{}\")\n\n    # Parse JSON strings\n    try:\n        property_features = json.loads(property_data_str) if isinstance(property_data_str, str) else property_data_str\n        location_data = json.loads(location_data_str) if isinstance(location_data_str, str) else location_data_str\n        comparable_sales = json.loads(comparables_str) if isinstance(comparables_str, str) else comparables_str\n        market_conditions = json.loads(market_data_str) if isinstance(market_data_str, str) else market_data_str\n    except json.JSONDecodeError:\n        return \"Error: Invalid JSON format in input data\"\n\n    if not property_features:\n        return \"Error: Property features data is required for valuation\"\n\n    result = automated_valuation_model(\n        property_features,\n        location_data or {},\n        comparable_sales or [],\n        market_conditions or {}\n    )\n\n    return str(result)\n\nexcept Exception as e:\n    return f\"Error in automated valuation: {str(e)}\"",
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"required\": [\"property_features\"],\n  \"properties\": {\n    \"property_features\": {\n      \"type\": \"object\",\n      \"description\": \"Property characteristics (bedrooms, bathrooms, square_feet, etc.)\"\n    },\n    \"location_data\": {\n      \"type\": \"object\",\n      \"description\": \"Location and neighborhood data\"\n    },\n    \"comparable_sales\": {\n      \"type\": \"array\",\n      \"description\": \"Recent comparable property sales data\"\n    },\n    \"market_conditions\": {\n      \"type\": \"object\",\n      \"description\": \"Current market conditions and trends\"\n    }\n  }\n}"
      },
      "id": "36bb6db2-18ee-4fb7-8eb4-4c9b8c1a1083",
      "name": "Automated Valuation Model (AVM)",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "position": [
        208,
        288
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "toolDescription": "Integrates GIS data, zoning information, and neighborhood demographics using geospatial APIs",
        "url": "https://api.open-meteo.com/v1/forecast",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {}
          ]
        },
        "optimizeResponse": true
      },
      "id": "8e85e2fa-888c-4009-bbba-86b92ab878f6",
      "name": "Location Intelligence Engine",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "position": [
        -352,
        288
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "description": "Extracts key property features and characteristics from listing descriptions and property details. Analyzes text to identify bedrooms, bathrooms, square footage, amenities, and property condition indicators.",
        "language": "python",
        "pythonCode": "import re\nfrom typing import Dict, List, Any\n\n# Extract property features from text descriptions\ndef extract_property_features(listing_text: str) -> Dict[str, Any]:\n    \"\"\"\n    Extract key property features from listing text using regex and NLP patterns.\n\n    Args:\n        listing_text: Property listing description or details\n\n    Returns:\n        Dictionary with extracted property features\n    \"\"\"\n    if not listing_text or not isinstance(listing_text, str):\n        return {\"error\": \"Invalid or missing listing text\"}\n\n    # Convert to lowercase for easier matching\n    text = listing_text.lower()\n\n    # Extract bedrooms\n    bedroom_patterns = [\n        r'(\\d+)\\s*bed(?:room)?s?',\n        r'(\\d+)\\s*br',\n        r'(\\d+)\\s*bed',\n    ]\n    bedrooms = None\n    for pattern in bedroom_patterns:\n        match = re.search(pattern, text)\n        if match:\n            bedrooms = int(match.group(1))\n            break\n\n    # Extract bathrooms\n    bathroom_patterns = [\n        r'(\\d+(?:\\.\\d+)?)\\s*bath(?:room)?s?',\n        r'(\\d+(?:\\.\\d+)?)\\s*ba',\n        r'(\\d+(?:\\.\\d+)?)\\s*baths?',\n    ]\n    bathrooms = None\n    for pattern in bathroom_patterns:\n        match = re.search(pattern, text)\n        if match:\n            bathrooms = float(match.group(1))\n            break\n\n    # Extract square footage\n    sqft_patterns = [\n        r'(\\d{3,6})\\s*(?:sq\\s*ft|sqft|square\\s*feet|sf)',\n        r'(\\d{3,6})\\s*sq',\n    ]\n    square_feet = None\n    for pattern in sqft_patterns:\n        match = re.search(pattern, text)\n        if match:\n            square_feet = int(match.group(1))\n            break\n\n    # Extract property type\n    property_types = {\n        'single family': ['single family', 'single-family', 'detached', 'house'],\n        'condo': ['condo', 'condominium', 'apartment'],\n        'townhouse': ['townhouse', 'townhome', 'rowhouse'],\n        'multi-family': ['multi-family', 'duplex', 'triplex', 'fourplex'],\n        'land': ['land', 'lot', 'acreage'],\n    }\n\n    property_type = 'unknown'\n    for prop_type, keywords in property_types.items():\n        if any(keyword in text for keyword in keywords):\n            property_type = prop_type\n            break\n\n    # Extract amenities/features\n    amenities = []\n    amenity_keywords = [\n        'pool', 'garage', 'basement', 'fireplace', 'hardwood', 'carpet',\n        'granite', 'stainless', 'updated kitchen', 'master suite', 'walk-in closet',\n        'deck', 'patio', 'fenced yard', 'garden', 'view', 'waterfront',\n        'golf course', 'mountain view', 'ocean view', 'city view'\n    ]\n\n    for amenity in amenity_keywords:\n        if amenity in text:\n            amenities.append(amenity)\n\n    # Extract year built\n    year_patterns = [\n        r'built\\s+in\\s*(\\d{4})',\n        r'year\\s*built[:\\s]*(\\d{4})',\n        r'constructed\\s*(\\d{4})',\n    ]\n    year_built = None\n    for pattern in year_patterns:\n        match = re.search(pattern, text)\n        if match:\n            year = int(match.group(1))\n            if 1800 <= year <= 2025:  # Reasonable year range\n                year_built = year\n                break\n\n    # Determine property condition\n    condition_indicators = {\n        'excellent': ['excellent condition', 'move-in ready', 'perfect condition', 'immaculate'],\n        'good': ['good condition', 'well maintained', 'updated', 'renovated'],\n        'fair': ['fair condition', 'needs work', 'fixer-upper', 'as-is'],\n        'poor': ['poor condition', 'needs repairs', 'dilapidated']\n    }\n\n    condition = 'unknown'\n    for cond, indicators in condition_indicators.items():\n        if any(indicator in text for indicator in indicators):\n            condition = cond\n            break\n\n    return {\n        \"bedrooms\": bedrooms,\n        \"bathrooms\": bathrooms,\n        \"square_feet\": square_feet,\n        \"property_type\": property_type,\n        \"amenities\": amenities[:10],  # Limit to top 10\n        \"year_built\": year_built,\n        \"condition\": condition,\n        \"extraction_confidence\": \"medium\" if bedrooms or bathrooms or square_feet else \"low\",\n        \"raw_text_length\": len(listing_text)\n    }\n\n# Parse input data\ntry:\n    listing_text = query.get(\"listing_text\", \"\")\n    if not listing_text:\n        return \"Error: No listing text provided\"\n\n    result = extract_property_features(listing_text)\n    return str(result)\n\nexcept Exception as e:\n    return f\"Error analyzing listing: {str(e)}\"",
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"required\": [\"listing_text\"],\n  \"properties\": {\n    \"listing_text\": {\n      \"type\": \"string\",\n      \"description\": \"Property listing description or details to analyze\"\n    }\n  }\n}"
      },
      "id": "5c0b4dd5-a511-4320-8b9b-bb96eb25c5d5",
      "name": "Listing Description Analyzer",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "position": [
        32,
        288
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "toolDescription": "Analyzes property images (satellite, street photos, floor plans) to extract curb appeal scores, architectural features, and condition indicators",
        "url": "https://api.github.com/search/code",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {}
          ]
        },
        "optimizeResponse": true
      },
      "id": "267db652-90ee-435a-869a-79bf10454ee9",
      "name": "Property Image Processor",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "position": [
        -160,
        288
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "contextWindowLength": 20
      },
      "id": "cd2221f3-f4bd-48cc-b39a-0b2d648f79a7",
      "name": "Conversation Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        -512,
        288
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi! I'm your Property Assessment Assistant. Upload property images and listing details for comprehensive real estate valuations.",
        "options": {
          "inputPlaceholder": "Upload property images or paste listing details...",
          "showWelcomeScreen": false,
          "subtitle": "Multi-modal property assessment with AI analysis",
          "title": "Property Assessment Assistant",
          "responseMode": "lastNode"
        }
      },
      "id": "72972e7d-9153-408e-94c6-2783c5277ca9",
      "name": "Property Assessment Assistant",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        -352,
        -48
      ],
      "webhookId": "prop-assessment-webhook",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDriveTool",
      "typeVersion": 3,
      "position": [
        784,
        288
      ],
      "id": "305ea782-5e48-4071-81dd-8a91fda1cfd2",
      "name": "Assessment Archive"
    }
  ],
  "connections": {
    "Market Data Retrieval": {
      "ai_tool": [
        [
          {
            "node": "Multi-Modal Property Analyzer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Assessment Report Generator": {
      "ai_tool": [
        [
          {
            "node": "Multi-Modal Property Analyzer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4 Vision Model": {
      "ai_languageModel": [
        [
          {
            "node": "Multi-Modal Property Analyzer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Automated Valuation Model (AVM)": {
      "ai_tool": [
        [
          {
            "node": "Multi-Modal Property Analyzer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Location Intelligence Engine": {
      "ai_tool": [
        [
          {
            "node": "Multi-Modal Property Analyzer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Listing Description Analyzer": {
      "ai_tool": [
        [
          {
            "node": "Multi-Modal Property Analyzer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Property Image Processor": {
      "ai_tool": [
        [
          {
            "node": "Multi-Modal Property Analyzer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Memory": {
      "ai_memory": [
        [
          {
            "node": "Multi-Modal Property Analyzer",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Property Assessment Assistant": {
      "main": [
        [
          {
            "node": "Multi-Modal Property Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assessment Archive": {
      "ai_tool": [
        [
          {
            "node": "Multi-Modal Property Analyzer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2bd918b407c290e8bb139d969f24518c6daf0a6ae9a8f56196275ae39545b380"
  }
}